// Generated by CoffeeScript 1.10.0
(function() {
  var $ukapreView, Balloon, NamedManager, SSP, Shell, SurfaceUtil, balloon, changeNar, changeShell, hwnd, load, loadBalloon, nmdmgr, ref, setup, shell, uiMain, ukapreView;

  ref = require("cuttlebone"), SurfaceUtil = ref.SurfaceUtil, Shell = ref.Shell, Balloon = ref.Balloon, NamedManager = ref.NamedManager;

  SSP = require("ikagaka.sakurascriptplayer.js");

  window["Encoding"] = require("encoding-japanese");

  window["JSZip"] = require("jszip");

  hwnd = null;

  shell = null;

  balloon = null;

  $ukapreView = null;

  nmdmgr = new NamedManager();

  exports.loadBalloon = loadBalloon = function(url) {
    return NarLoader.loadFromURL(url).then(function(origin) {
      var balloonDir;
      balloonDir = origin.asArrayBuffer();
      (balloon != null) && balloon.unload();
      balloon = new Balloon(balloonDir);
      return balloon.load();
    });
  };

  exports.load = load = function(opt) {
    if (opt == null) {
      opt = {};
    }
    if (opt.balloonURL == null) {
      opt.balloonURL = "https://ikagaka.github.io/cuttlebone/nar/origin.nar";
    }
    return new Promise(function(resolve, reject) {
      return $(function() {
        $ukapreView = $(ukapreView).appendTo(document.body);
        $(nmdmgr.element).appendTo(document.body);
        return Promise.resolve().then(function() {
          return loadBalloon(opt.balloonURL);
        }).then(function() {
          return setup();
        }).then(function() {
          return resolve();
        })["catch"](function(err) {
          console.error(err, err.stack);
          return reject(err);
        });
      });
    });
  };

  setup = function() {
    $ukapreView.find(".narfile").change(function() {
      return NarLoader.loadFromBlob($(this).prop("files")[0]).then(changeNar);
    });
    $ukapreView.find(".boot").click(function() {
      return NarLoader.loadFromURL($ukapreView.find(".narurl").val()).then(changeNar);
    });
    return $ukapreView.find(".kill").click(function() {
      return (nmdmgr.namedies[hwnd] != null) && nmdmgr.vanish(hwnd);
    });
  };

  changeNar = function(nanikaDir) {
    var $frag, shelllist;
    shelllist = nanikaDir.getDirectory("shell").listChildren();
    $frag = $(document.createDocumentFragment());
    shelllist.forEach(function(shellId) {
      return $("<option />").val(shellId).text(shellId).appendTo($frag);
    });
    $ukapreView.find(".shellId").children().remove().end().append($frag).unbind().change(function() {
      return changeShell(nanikaDir);
    });
    if (shelllist.length === 0) {
      return console.warn("this nar does not have any shell");
    }
    if (shelllist.indexOf("master") !== -1) {
      return $ukapreView.find(".shellId").val("master").change();
    } else {
      return $ukapreView.find(".shellId").val(shelllist[0]).change();
    }
  };

  changeShell = function(nanikaDir) {
    var shellDir, shellId;
    shellId = $ukapreView.find(".shellId").val();
    shellDir = nanikaDir.getDirectory("shell/" + shellId).asArrayBuffer();
    (shell != null) && shell.unload();
    shell = new Shell(shellDir);
    return shell.load().then(function(shell) {
      return uiMain();
    });
  };

  uiMain = function() {
    var named, ssp;
    (nmdmgr.namedies[hwnd] != null) && nmdmgr.vanish(hwnd);
    hwnd = nmdmgr.materialize(shell, balloon);
    named = nmdmgr.named(hwnd);
    ssp = new SSP(named);
    (function() {
      $ukapreView.unbind().find(".pos").click(function() {
        return named.scopes.forEach(function(scope) {
          return scope.position({
            right: 0,
            bottom: 0
          });
        });
      });
      return $ukapreView.unbind().submit(function(ev) {
        ev.preventDefault();
        return ssp.play($ukapreView.find(".ss").val());
      });
    })();
    (function() {
      var $frag;
      $frag = $(document.createDocumentFragment());
      Object.keys(shell.surfaceTree).forEach(function(surfaceId) {
        return $frag.append($("<option />").val(surfaceId).text(surfaceId));
      });
      return $ukapreView.find(".surfaceId").children().remove().end().append($frag).unbind().change(function() {
        var scopeId, surfaceId;
        scopeId = $ukapreView.find(".scopeId").val();
        surfaceId = $ukapreView.find(".surfaceId").val();
        $frag = $(document.createDocumentFragment());
        $("<option />").val("").text("---").appendTo($frag);
        if (shell.surfaceTree[surfaceId] != null) {
          shell.surfaceTree[surfaceId].animations.forEach(function(animation, i) {
            return $("<option />").val(i).text(i + ":" + animation.interval).appendTo($frag);
          });
        }
        $ukapreView.find(".animationId").children().remove().end().append($frag);
        return ssp.play("\\p[" + scopeId + "]\\s[" + surfaceId + "]\\e");
      }).val(0).change().find(".animationId").unbind().change(function() {
        var animationId;
        animationId = $(this).val();
        if (!!srf && isFinite(Number(animationId))) {
          srf.stop(Number(animationId));
          return srf.play(Number(animationId));
        }
      });
    })();
    (function() {
      var $frag;
      $frag = $(document.createDocumentFragment());
      Object.keys(shell.bindgroup).forEach(function(scopeId) {
        var $li;
        $li = $("<li />").appendTo($frag);
        return Object.keys(shell.bindgroup[scopeId]).forEach(function(bindgroupId) {
          var $checkbox;
          $checkbox = $("<input type='checkbox' name='bindgroupId' />").attr("data-scopeId", scopeId).val(bindgroupId).prop("checked", shell.bindgroup[scopeId][bindgroupId]);
          return $("<label />").text(bindgroupId + ":").append($checkbox).appendTo($li);
        });
      });
      return $ukapreView.find(".bindgroupId").children().remove().end().append($frag).find("input[name='bindgroupId'][type='checkbox']").unbind().change(function() {
        var bindgroupIds, scopeId;
        scopeId = $(this).attr("data-scopeId");
        bindgroupIds = {};
        $(this).each(function() {
          var bindgroupId;
          bindgroupId = $(this).val();
          if ($(this).prop("checked")) {
            return shell.bind(scopeId, bindgroupId);
          } else {
            return shell.unbind(scopeId, bindgroupId);
          }
        });
        return shell.render();
      });
    })();
    (function() {
      return $ukapreView.find(".collisionDraw").unbind().change(function() {
        if ($(this).prop("checked")) {
          return shell.showRegion();
        } else {
          return shell.hideRegion();
        }
      });
    })();
    (function() {
      var dragging, relLeft, relTop;
      dragging = false;
      relLeft = relTop = 0;
      $ukapreView.mousedown(function(ev) {
        var clientX, clientY, left, pageX, pageY, ref1, ref2, top;
        dragging = true;
        ref1 = $ukapreView.offset(), top = ref1.top, left = ref1.left;
        ref2 = SurfaceUtil.getEventPosition(ev), pageX = ref2.pageX, pageY = ref2.pageY, clientX = ref2.clientX, clientY = ref2.clientY;
        relLeft = clientX - (left - window.scrollX);
        return relTop = clientY - (top - window.scrollY);
      });
      $ukapreView.mouseup(function() {
        return dragging = false;
      });
      return $(document.body).mousemove(function(ev) {
        var clientX, clientY, pageX, pageY, ref1;
        if (!dragging) {
          return;
        }
        ref1 = SurfaceUtil.getEventPosition(ev), pageX = ref1.pageX, pageY = ref1.pageY, clientX = ref1.clientX, clientY = ref1.clientY;
        return $ukapreView.css({
          top: clientY - relTop,
          left: clientX - relLeft
        });
      });
    })();
  };

  ukapreView = "<form id=\"sspInputBox\">\n  <style scoped>\n    #sspInputBox {\n      display: inline-box;\n      position: absolute;\n      top: 10px;\n      left: 10px;\n      padding: 10px;\n      background-color: #D2E0E6;\n      border: 1px solid gray;\n      border-top: none;\n      border-left: none;\n    }\n    #sspInputBox input[type='text'] {\n      width: 30em;\n    }\n  </style>\n  <p>\n    <label>nar: <input type=\"file\" class=\"narfile\" /></label>\n    <label>url: <input type=\"url\" class=\"narurl\" /></label>\n    <input type=\"button\" class=\"boot\" value=\"boot\" />\n    <input type=\"button\" class=\"kill\" value=\"kill\" />\n  </p>\n  <p>\n    <label>shell: <select name=\"shellId\" class=\"shellId\"></select></label>\n    <label>scope: <input type=\"number\" name=\"scopeId\" class=\"scopeId\" value=\"0\" /></label>\n    <label>surface: <select name=\"surfaceId\" class=\"surfaceId\"></select></label>\n    <label>animation: <select name=\"animationId\" class=\"animationId\"></select></label>\n    <label>collision: <input type=\"checkbox\" class=\"collisionDraw\" /></label>\n    bindgroup: <ol class=\"bindgroupId\" start=\"0\"/></ol>\n  </p>\n  <p>\n    <input type='text' class=\"ss\" value=\"\\0\\s[0]Hello World!\\w8\\1\\s[10]Hello Ukagaka!\\e\"/>\n    <input type=\"submit\" class=\"play\" value=\"play\" />\n    <input type=\"button\" class=\"pos\" value=\"pos\" />\n  </p>\n</form>";

}).call(this);
